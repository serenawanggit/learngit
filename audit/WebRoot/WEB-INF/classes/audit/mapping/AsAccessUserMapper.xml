<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="audit.dao.AsAccessUserMapper" >
  <resultMap id="BaseResultMap" type="audit.model.assess.AsAccessUser" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="user_name" property="userName" jdbcType="VARCHAR" />
    <result column="user_type" property="userType" jdbcType="TINYINT" />
    <result column="user_group_id" property="userGroupId" jdbcType="INTEGER" />
    <result column="operate_type" property="operateType" jdbcType="TINYINT" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, user_id, user_name, user_type, user_group_id, operate_type
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from AS_ACCESS_USER
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from AS_ACCESS_USER
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="audit.model.assess.AsAccessUser" useGeneratedKeys="true" keyProperty="id">
    insert into AS_ACCESS_USER (id, user_id, user_name, 
      user_type, user_group_id, operate_type)
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{userName,jdbcType=VARCHAR}, 
      #{userType,jdbcType=TINYINT}, #{userGroupId,jdbcType=INTEGER}, #{operateType,jdbcType=TINYINT})
  </insert>
  <insert id="insertSelective" parameterType="audit.model.assess.AsAccessUser" useGeneratedKeys="true" keyProperty="id">
    insert into AS_ACCESS_USER
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="userName != null" >
        user_name,
      </if>
      <if test="userType != null" >
        user_type,
      </if>
      <if test="userGroupId != null" >
        user_group_id,
      </if>
      <if test="operateType != null" >
        operate_type,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="userName != null" >
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="userType != null" >
        #{userType,jdbcType=TINYINT},
      </if>
      <if test="userGroupId != null" >
        #{userGroupId,jdbcType=INTEGER},
      </if>
      <if test="operateType != null" >
        #{operateType,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="audit.model.assess.AsAccessUser" >
    update AS_ACCESS_USER
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="userName != null" >
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="userType != null" >
        user_type = #{userType,jdbcType=TINYINT},
      </if>
      <if test="userGroupId != null" >
        user_group_id = #{userGroupId,jdbcType=INTEGER},
      </if>
      <if test="operateType != null" >
        operate_type = #{operateType,jdbcType=TINYINT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="audit.model.assess.AsAccessUser" >
    update AS_ACCESS_USER
    set user_id = #{userId,jdbcType=INTEGER},
      user_name = #{userName,jdbcType=VARCHAR},
      user_type = #{userType,jdbcType=TINYINT},
      user_group_id = #{userGroupId,jdbcType=INTEGER},
      operate_type = #{operateType,jdbcType=TINYINT}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <!-- 我是分割线 -->
  
  <select id="getUserListByQuery" resultMap="BaseResultMap" parameterType="audit.model.assess.AsAccessUser">
  select * from AS_ACCESS_USER
  <where>
  	<if test="userGroupId != null">
  	user_group_id = #{userGroupId,jdbcType=INTEGER}
  	</if>
  	<if test="userId != null">
  	and user_id = #{userId,jdbcType=INTEGER}
  	</if>
  	<if test="userType != null">
  	and user_type = #{userType,jdbcType=INTEGER}
  	</if>
  	<if test="operateType != null">
  	and operate_type = #{operateType,jdbcType=INTEGER}
  	</if>
  	order by user_id
  </where>
  </select>
</mapper>